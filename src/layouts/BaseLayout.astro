---
import Profile from "../components/ProfileCard.astro";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Content from "../components/Content.astro";
import TagCard from "../components/TagCard.astro";
import CategoryCard from "../components/CategoryCard.astro";
import { SITE_TAB, SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import i18next, { changeLanguage } from "i18next";

changeLanguage("en");
const { title, image, includeSidebar = true } = Astro.props;
---

<!doctype html>
<html lang={i18next.language} data-theme="retro">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title class="sr-only">{`${title} - ${SITE_TAB}`}</title>
    <script is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const userPreferredTheme = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches
          ? "retro-dark"
          : "retro";
        const theme = storedTheme || userPreferredTheme;
        document.documentElement.setAttribute("data-theme", theme);
      })();
    </script>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} image={image} />
  </head>
  <body>
    <Header title={SITE_TITLE} />
    <div class="layout-container">
      <div class="layout-grid">
        {
          includeSidebar && (
            <aside class="sidebar">
              <Profile />
              <CategoryCard />
              <TagCard />
              <Content />
            </aside>
          )
        }
        <main class="main-content" id="swup">
          <slot />
          <Footer />
        </main>
      </div>
    </div>
  </body>
</html>

<script>
  // Service Worker Registration for Performance
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registered: ', registration);
        })
        .catch((registrationError) => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }

  // Performance optimization: Intersection Observer for lazy loading
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.classList.remove('lazy');
            observer.unobserve(img);
          }
        }
      });
    });

    document.querySelectorAll('img[data-src]').forEach(img => {
      imageObserver.observe(img);
    });
  }
</script>

<style>
  .layout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .layout-grid {
    display: grid;
    gap: 2rem;
    margin-top: 1rem;
  }
  
  .sidebar {
    display: none;
  }
  
  .main-content {
    width: 100%;
  }
  
  @media (min-width: 768px) {
    .layout-grid {
      grid-template-columns: 1fr 3fr;
      gap: 2rem;
    }
    
    .sidebar {
      display: block;
      order: 1;
    }
    
    .main-content {
      order: 2;
    }
  }
  
  @media (min-width: 1024px) {
    .layout-grid {
      grid-template-columns: 1fr 4fr;
      gap: 3rem;
    }
  }
</style>
